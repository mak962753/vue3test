const mix = require('laravel-mix');
const { VueLoaderPlugin } = require('vue-loader');
const webpack = require('webpack');
const tailwindcss = require('tailwindcss');
//const path = require('path')

if (process.argv.includes('--hot')) {
    mix.webpackConfig( {
            resolve: {
                //alias: { 'vue': '@vue/runtime-dom' }
            },
            // resolve: {
            //     alias: {
            //         // this isn't technically needed, since the default `vue` entry for bundlers
            //         // is a simple `export * from '@vue/runtime-dom`. However having this
            //         // extra re-export somehow causes webpack to always invalidate the module
            //         // on the first HMR update and causes the page to reload.
            //         'vue': '@vue/runtime-dom',
            //         "@": path.resolve("./src"),
            //     },
            //     extensions: ['.js', '.json', '.ts', '.vue']
            // },
            // output: {
            //     path: path.resolve('./dist'),
            //     publicPath: ''
            // },
            devServer: {
                hot: true,
                inline: true,
                port: 9998,
                headers: {
                    'Access-Control-Allow-Origin': '*'
                },
                index: 'index.html',
                contentBase: __dirname,
                historyApiFallback: true,
                noInfo: false,
                compress: true,
                quiet: false
            }
        });
}


/*mix.webpackConfig({
    module: {
        rules: [ {
                test: /\.vue$/,
                use: 'vue-loader'
            }
        ]
    }
});
*/

mix.ts('src/main.ts', 'dist/')
    .sass('src/app.scss', 'dist/').options({
        processCssUrls: false,
        postCss: [
            tailwindcss('./tailwind.config.js')
        ]
}).setPublicPath('');

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });



/*
,
    "paths": {
      "@/*": [
        "src/*"
      ]
    }
    
    
  "include": [
    "src/ * * / *.ts",
"src/* * / *.vue"
],

  // <!--    <div>-->
    // <!--        <router-link to="/">home</router-link>-->
    //     <!--        <router-link to="/about">about</router-link>-->
    //     <!--    </div>-->
    // <!--    -->
    // <!--    <counter />-->
    // <!--    -->
    // <!--    <router-view />-->
 */